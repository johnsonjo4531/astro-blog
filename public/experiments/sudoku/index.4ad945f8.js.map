{"mappings":"AAAe,MAAAA,EACbC,cACEC,KAAKC,WAAa,IAAIC,GACxB,CAEAC,iBAAkBC,GAChB,IAAIA,EAAIC,OACN,MAAM,IAAIC,MAAM,gCAElBN,KAAKC,WAAWM,IAAIH,EACtB,CAEAI,mBAAoBJ,GAClBJ,KAAKC,WAAWQ,OAAOL,EACzB,CAEAM,gBAAiBC,EAAMX,MACrB,IAAI,IAAII,KAAOJ,KAAKC,WAClBG,EAAIC,OAAOM,EAEf,EClBa,MAAAC,UAA+Bd,EAC5CC,cACEc,QACAb,KAAKc,SAAW,IAAIZ,IACpBF,KAAKe,WAAa,EAClBf,KAAKgB,aACLhB,KAAKiB,WAAa,GAClBjB,KAAKkB,OAAS,GACdlB,KAAKmB,eAAiB,GACtBnB,KAAKoB,cAAWC,CAClB,CAEAC,4BACE,IACEtB,KAAKmB,eAAiB,GACtB,IAAKI,EAASC,SAAkBC,aAAazB,KAAK0B,WAAY1B,KAAK2B,SACnE3B,KAAKiB,WAAaM,EAClBvB,KAAKkB,OAASM,EAASI,aACvB5B,KAAKU,iBACP,CAAE,MAAOmB,GACPC,QAAQC,MAAMF,GACd7B,KAAKmB,eAAiBU,EAAEG,QACxBhC,KAAKiB,WAAa,GAClBjB,KAAKkB,OAAS,GACdlB,KAAKU,iBACP,CACF,CAEIuB,oBACF,OAAOjC,KAAKmB,cACd,CAEIe,gBACF,OAAOlC,KAAKiB,UACd,CAEIkB,YACF,OAAOnC,KAAKkB,MACd,CAEAF,aACEhB,KAAKoC,OAAS,IAAIC,MAAMrC,KAAKe,YAAYuB,KAAK,GAAGC,KAAI,IAAI,IAAIF,MAAMrC,KAAKe,YAAYuB,KAAK,MAC3F,CAEIZ,iBACF,OAAO1B,KAAKoC,OAAOG,KAAIC,GAAGA,EAAEC,SAC9B,CAEIC,YACF,OAAO1C,KAAKoC,MACd,CAEIO,cAAWC,GACb,IAA4C,IAAzC,CAAC,EAAE,EAAE,EAAE,GAAGL,KAAIM,GAAGA,GAAG,IAAGC,QAAQF,GAChC,MAAM,IAAItC,MAAM,sBAElBN,KAAKe,WAAa6B,EAClB5C,KAAKgB,aACLhB,KAAKU,iBACP,CAEIiC,gBACF,OAAO3C,KAAKe,UACd,CAEIY,YAASA,GAEX,IADAA,EAAU,IAAIA,IACHoB,MAAKF,GAAgB,IAAbA,EAAEG,SACnB,MAAM,IAAI1C,MAAM,4CAElBN,KAAKc,SAAW,IAAIZ,IAAIyB,GACxB3B,KAAKU,iBACP,CAEIiB,cACF,OAAO3B,KAAKc,QACd,CAEAmC,QAASC,EAASC,GAChB,IAAIP,EAAO5C,KAAK2C,UACZS,EAAMC,KAAKC,MAAMJ,EAAUN,GAC3BW,EAAMF,KAAKC,MAAMJ,EAAUN,GAC5B5C,KAAK0C,MAAMU,GAAKG,KAASJ,IAG5BnD,KAAK0C,MAAMU,GAAKG,GAAOJ,EACvBnD,KAAKU,kBACP,CAEI8C,kBACF,OAAOC,cAAczD,KAAK0C,MAC5B,CAEAgB,cAAeN,EAAKG,EAAKJ,GACpBnD,KAAK0C,MAAMU,GAAKG,KAASJ,IAG5BnD,KAAK0C,MAAMU,GAAKG,GAAOJ,EACvBnD,KAAKU,kBACP,CAEAiD,gBACE,IAAIC,EAAO,IAAIC,KAAK,CAAC7D,KAAK2C,UAAU,KAAM,IAAI3C,KAAK2B,SAASmC,KAAK,KAAM,KAAK9D,KAAKwD,aAAc,CAACO,KAAM,eAWtG,OAPsB,OAAlB/D,KAAKoB,UACP4C,OAAOC,IAAIC,gBAAgBlE,KAAKoB,UAGlCpB,KAAKoB,SAAW4C,OAAOC,IAAIE,gBAAgBP,GAGpC5D,KAAKoB,QACd,CAEAgD,QAASlB,GACP,IAAIN,EAAO5C,KAAK2C,UACZS,EAAMC,KAAKC,MAAMJ,EAAUN,GAC3BW,EAAMF,KAAKC,MAAMJ,EAAUN,GAC/B,OAAO5C,KAAK0C,MAAMU,GAAKG,EACzB,EC3HF,IAAIc,EAAYxB,GAAKA,EAAEyB,QAAQ,0BAA0B,SAASC,GAChE,MAAO,KAAKA,EAAEC,WAAW,GAAG,GAC9B,IAEA,SAASC,EAASC,EAAKC,GACrB,OAAOD,EAAInC,IAAIoC,GAAIb,KAAK,GAC1B,CAEA,SAASc,EAASC,GAChB,OAAO,IAAIC,SAAQC,GAAKC,WAAWD,EAAKF,IAC1C,CAEO,MAAMI,EACXlF,YAAamF,EAAOC,GAClBnF,KAAKkF,MAAQA,EACblF,KAAKoF,KAAOC,EAAEF,GACdnF,KAAKsF,SAAWtF,KAAKkF,MAAMvC,UAC3B3C,KAAKkF,MAAM/E,iBAAiBH,MAC5BA,KAAKuF,aAAevF,KAAKkF,MAAM1B,YAC/BxD,KAAKwF,SACLxF,KAAKyF,kBAAoBC,KAAKC,KAChC,CAEAH,SACE,IAAIjB,EAAI,EACJqB,EAAWP,EAAEQ,SAASC,eAAeC,YACrCH,EAASI,GAAG,yBACdJ,EAAWA,EAASK,KAAK,wBAE3B,IAAIC,EAAcN,EAASO,KAAK,gBAC5BC,EAAY,EAAER,EAASS,IAAI,IAAM,CAAC,GAAGC,gBAAiBV,EAASS,IAAI,IAAM,CAAC,GAAGE,cACjFvG,KAAKoF,KAAKoB,KACR,+CAEI/B,EAAQzE,KAAKkF,MAAMxC,OAAQU,IAC3B,IAAIR,EAAO6D,OAAOzG,KAAKkF,MAAMvC,WAC7B,MAAO,uCAAuCC,KAAQA,oBAClD6B,EAAQrB,GAAMsD,GAAS,yBAAyB9D,KAAQA,qFAE/B2B,2BAA2BF,EAAUqC,sEAG3D,qBAIbrB,EAAE,uBAAuBa,OAAiBS,QAC1C,IAAIC,EAAW,CAACC,EAAIC,EAAU,CAAAjE,KAAKA,MACjC,IAAIkE,EAAO,CAACC,GAAI,SAAUrC,GAAM,OAAOmC,EAAUD,GAAMD,EAASjC,EAAGkC,GAAKC,GAAaC,CAAM,E,GAAGF,GAC9F,OAAOE,CAAA,EAGTH,EAASvB,EAAE,uBAAuBa,OAAiBG,IAAI,IAAIW,IAAGnE,GAAGA,EAAEoE,qBAAqBb,IAC1F,CAEA9E,eAAgBqD,EAAIE,GAClB,IAAIqC,EAAUxB,KAAKC,MACnB3F,KAAKyF,kBAAoByB,QACnBtC,EAAQC,GACXqC,IAAYlH,KAAKyF,mBAClBd,GAEJ,CAGArD,aAAcjB,GACZL,KAAKmH,UAAS,KACTnH,KAAKuF,eAAiBvF,KAAKkF,MAAM1B,aAAexD,KAAKsF,WAAatF,KAAKkF,MAAMvC,YAGhF3C,KAAKuF,aAAevF,KAAKkF,MAAM1B,YAC/BxD,KAAKsF,SAAWtF,KAAKkF,MAAMvC,UAC3B3C,KAAKwF,SAAM,GACV,GACL,EAQK,MAAM4B,EACXrH,YAAamF,EAAOC,GAClBnF,KAAKkF,MAAQA,EACblF,KAAKoF,KAAOC,EAAEF,GACdnF,KAAKqH,YAAc,IAAInH,IAAI,IAAIF,KAAKkF,MAAMvD,UAC1C3B,KAAKkF,MAAM/E,iBAAiBH,MAC5BA,KAAKwF,QACP,CAEAA,SACE,IAAI7D,EAAU3B,KAAKkF,MAAMvD,QACrB2F,EAAQjC,EAAE,4CACdiC,EAAMnE,IAAI,IAAIxB,GAASmC,KAAK,MAC5BwD,EAAMrB,KAAK,iBAAiBjG,KAAKkF,MAAMvC,eAAewD,KAAK,YAAY,GACvEnG,KAAKoF,KAAKmC,QAAQC,OAAOF,EAC3B,CAEAjH,SArBF,IAAuBoH,EAAMC,GAAND,EAsBHzH,KAAKqH,YAtBIK,EAsBS1H,KAAKkF,MAAMvD,QArBxC8F,EAAK7E,OAAS8E,EAAK9E,MAAQ6E,EAAK7E,MAAQ,IAAI1C,IAAI,IAAIuH,KAASC,IAAO9E,QAwBzE5C,KAAKqH,YAAc,IAAInH,IAAI,IAAIF,KAAKkF,MAAMvD,UAC1C3B,KAAKwF,SACP,EAGK,MAAMmC,EACX5H,YAAamF,EAAOC,GAClBnF,KAAKkF,MAAQA,EACblF,KAAKoF,KAAOC,EAAEF,GACdnF,KAAK4H,cAAgB5H,KAAKkF,MAAMvC,UAChC3C,KAAKkF,MAAM/E,iBAAiBH,MAC5BA,KAAKwF,QACP,CAEAA,SACExF,KAAKoF,KAAOpF,KAAKoF,KAAKoB,KAAK,8MAO3BxG,KAAKoF,KAAKa,KAAK,iBAAiBjG,KAAKkF,MAAMvC,eAAewD,KAAK,YAAY,EAE7E,CAEA9F,SACKL,KAAK4H,gBAAkB5H,KAAKkF,MAAMvC,YAGrC3C,KAAK4H,cAAgB5H,KAAKkF,MAAMvC,UAChC3C,KAAKwF,SACP,EAEF,SAASqC,EAAqBnF,GAC5B,IACIE,EAAO6D,OAAO/D,EAAMM,QACxB,MAAO,uCAEHyB,EAAQ/B,GAAOU,GACR,uCAAuCR,KAAQA,gBAClD6B,EAAQrB,GAAKsD,GAAS,yBAAyB9D,KAAQA,wDAEnDyB,EAAUqC,sEAMxB,CAiBO,MAAMoB,EACX/H,YAAamF,EAAOC,GAClBnF,KAAKkF,MAAQA,EACblF,KAAKoF,KAAOC,EAAEF,GACdnF,KAAKsF,SAAWtF,KAAKkF,MAAMvC,UAE3B3C,KAAKkF,MAAM/E,iBAAiBH,MAC5BA,KAAKuF,aAAevF,KAAKkF,MAAM1B,YAC/BxD,KAAK+H,UAAY/H,KAAKkF,MAAM/C,KAC9B,CAEAqD,SACE,IAAIwC,EAAW,eACXC,GAAY,EACZC,GAAY,EACblI,KAAKkF,MAAMjD,eACZ+F,EAAW,QACXE,GAAY,GACJlI,KAAKkF,MAAMhD,UAAUc,OAAS,GACtCgF,EAAW,qBACXC,GAAY,GAC2B,GAA/BjI,KAAKkF,MAAMhD,UAAUc,SAC7BgF,EAAW,SACXC,GAAY,GAGdjI,KAAKoF,KAAKoB,KACR,sCAEMwB,iBACJhI,KAAKkF,MAAMhD,UAAUK,IAAIsF,GAAqB/D,KAAK,cACnDmE,EACA,cAAcjI,KAAKkF,MAAM/C,qBACtB,aACH+F,EACA,cAAclI,KAAKkF,MAAMjD,6BACtB,aAGT,CAEAX,eAAgBqD,EAAIE,GAClB,IAAIqC,EAAUxB,KAAKC,MACnB3F,KAAKyF,kBAAoByB,QACnBtC,EAAQC,GACXqC,IAAYlH,KAAKyF,mBAClBd,GAEJ,CAEAtE,SACEL,KAAKmH,UAAS,MACTnH,KAAKuF,eAAiBvF,KAAKkF,MAAM1B,aAAgBxD,KAAKkF,MAAMjD,eAAiBjC,KAAKkF,MAAM/C,QAAUnC,KAAK+H,aAG1G/H,KAAKuF,aAAevF,KAAKkF,MAAM1B,YAC/BxD,KAAKwF,SAAM,GACV,IAAK,GACV,ECjOFH,EAAEQ,SAASsC,MAAMC,GAAG,QAAS,eAAe,SAAUvG,GACpDwD,EAAErF,MAAMiG,KAAK,SAASU,OACxB,IAEA,IAAI0B,EAAa,ICHF,MACbtI,cACEC,KAAKkF,MAAQ,IAAItE,EAEjBZ,KAAKsI,eAAiBjD,EAAE,0BACxBrF,KAAKuI,YAAclD,EAAE,uBACrBrF,KAAKwI,WAAanD,EAAE,sBACpBrF,KAAKyI,OAASpD,EAAE,WAEhBrF,KAAK0I,eAAiB,IAAIzD,EAAgBjF,KAAKkF,MAAOlF,KAAKwI,YAC3DxI,KAAK2I,gBAAkB,IAAIvB,EAAgBpH,KAAKkF,MAAOlF,KAAKuI,aAC5DvI,KAAK4I,cAAgB,IAAIjB,EAAmB3H,KAAKkF,MAAOlF,KAAKsI,gBAC7DtI,KAAK6I,WAAa,IAAIf,EAAW9H,KAAKkF,MAAOlF,KAAKyI,OACpD,CAEAK,UAAWC,EAAMlH,GACf,IAAImH,EAAMnH,EAAEmH,IAOZ,GAAKhJ,KAAKiJ,SAASD,GAAnB,CAIA,IAAIE,EAASC,SAAS9D,EAAE0D,GAAM5C,KAAK,gBAAiB,IACpDnG,KAAKkF,MAAMjC,QAAQiG,EAAQF,EAHzB,CAIJ,CAEAC,SAAUD,GACR,IAAII,EAAO,IAAIpJ,KAAKkF,MAAMvD,QAAS,KACnC,OAAO,IAAIzB,IAAIkJ,GAAMC,IAAIL,EAC3B,CAEAM,gBAAiBC,GACf,OAAO,IAAIrJ,IAAI,CAAC,GAAG,EAAE,GAAG,IAAImJ,IAAIE,EAClC,CAEAC,qBAAsBD,GACpB,OAAO,IAAIrJ,IAAI,CAAC,GAAG,GAAG,GAAG,KAAKmJ,IAAIE,EACpC,CAEAE,aAAcV,GACZ,OAAOA,GAAQ,GAAKA,EAAO/I,KAAKkF,MAAMvC,UAAU3C,KAAKkF,MAAMvC,SAC7D,CAEA+G,WAAYC,EAASC,GACnB,IAAIC,EAAgB7J,KAAKkF,MAAMvC,UAC3BmH,EAAe9J,KAAKkF,MAAMvC,WAAW,EACN,IAAhCU,KAAK0G,IAAIJ,EAAUC,GAEpBD,EADUtG,KAAKC,MAAMsG,EAAUC,GACjBA,GAAiBF,EAAUE,GAAiBA,EAE1DF,GAAYA,EAAUG,GAAgBA,EAExC,OAAO9J,KAAKyJ,aAAaE,GAAWA,EAAUC,CAChD,CAEAI,yBAA0BjB,EAAMQ,GAC9B,IAAIU,EAAWd,SAAS9D,EAAE0D,GAAM5C,KAAK,iBACrC,OAAOoD,GACL,KAAK,GAELlE,EAAE,kBAAkBrF,KAAK0J,WAAWO,EAAS,EAAGA,QAAetD,QAC/D,MACA,KAAK,GAELtB,EAAE,kBAAkBrF,KAAK0J,WAAWO,EAASjK,KAAKkF,MAAMvC,UAAWsH,QAAetD,QAClF,MACA,KAAK,GAELtB,EAAE,kBAAkBrF,KAAK0J,WAAWO,EAAS,EAAGA,QAAetD,QAC/D,MACA,KAAK,GAELtB,EAAE,kBAAkBrF,KAAK0J,WAAWO,EAASjK,KAAKkF,MAAMvC,UAAWsH,QAAetD,QAGtF,CAEAuD,YAAanB,EAAMlH,GACjB,IAAImH,EAAMnH,EAAEmH,IACRO,EAAU1H,EAAE0H,SAAW1H,EAAEsI,MAE7B,IAAInK,KAAKiJ,SAASD,GAChB,OAAGhJ,KAAKwJ,qBAAqBD,QAC3BvJ,KAAKgK,yBAAyBjB,EAAMQ,IAGnCvJ,KAAKsJ,gBAAgBC,IACP,IAAZA,IACDlE,EAAE0D,GAAM5F,IAAI,IACZnD,KAAK8I,UAAUC,EAAK,CAACQ,QAAS,IAAKP,IAAK,YAG5CnH,EAAEuI,kBAIJ/E,EAAE0D,GAAM5F,IAAI,GACd,CAEAkH,kBACErK,KAAKkF,MAAMoF,qBACb,CAEAC,qBAAsBjD,EAAOzF,GAC3B7B,KAAKkF,MAAMvC,UAAYwG,SAAS9D,EAAEiC,GAAOnE,MAAO,GAClD,CAEAqH,cAAeC,EAAI5I,GACjB,IAAIyF,EAAQmD,EAAGC,QACX/H,UACFA,EAASgI,UACTA,EAASjI,MACTA,GACEkI,WAAWtD,GACftH,KAAKkF,MAAMvC,UAAYA,EACvB3C,KAAKkF,MAAMvD,QAAUgJ,EACrB,IAAI,IAAIpG,EAAI,EAAGA,EAAI5B,IAAY4B,EAC7B,IAAI,IAAIsG,EAAI,EAAGA,EAAIlI,IAAYkI,EAC7B7K,KAAKkF,MAAMxB,cAAca,EAAGsG,EAAGnI,EAAM6B,GAAGsG,GAG9C,CAEAC,aAAcjJ,GACZ,IAAIkJ,EAAOlF,SAASmF,cAAc,KAC9BpI,EAAO6D,OAAOzG,KAAKkF,MAAMvC,WAC7BoI,EAAKE,aAAa,WAAY,eAAerI,KAAQA,SACrDmI,EAAKG,KAAOlL,KAAKkF,MAAMvB,gBACvBkC,SAASsC,KAAKgD,YAAYJ,GAG1B/G,OAAOoH,uBAAsB,WAC3B,IAAIC,EAAQ,IAAIC,WAAW,SAC3BP,EAAKQ,cAAcF,GACnBxF,SAASsC,KAAKqD,YAAYT,EAC5B,GACF,CAEAU,kBAAmBnE,EAAOzF,GACxB7B,KAAKkF,MAAMvD,QAAU0D,EAAEiC,GAAOnE,MAAMuI,MAAM,IAC5C,GD5IFrD,EAAWG,WAAWJ,GAAG,UAAW,kCAAkC,SAAUvG,GAC9EwG,EAAW6B,YAAYlK,KAAM6B,EAC/B,IAEAwG,EAAWG,WAAWJ,GAAG,QAAS,kCAAkC,SAAUvG,GAC5EwG,EAAWS,UAAU9I,KAAM6B,EAC7B,IAEAwG,EAAWC,eAAeF,GAAG,SAAU,UAAU,SAAUvG,GACzDwG,EAAWkC,qBAAqBvK,KAClC,IACAqI,EAAWE,YAAYH,GAAG,SAAU,sBAAsB,SAAUvG,GAClEwG,EAAWoD,kBAAkBzL,KAC/B,IAEAqF,EAAE,eAAe+C,GAAG,UAAU,WAC5B,IAAIuD,EAAS,IAAIC,WACjBD,EAAOE,UAAY,SAAUC,GAC3BzD,EAAWmC,cAAcxK,KAAM8L,EACjC,EACAH,EAAOI,WAAY/L,KAAKgM,MAAM,GAChC,IAEA3G,EAAE,WAAW+C,GAAG,SAAS,SAAUvG,GACjCwG,EAAWgC,iBACb,IAEAhF,EAAE,aAAa+C,GAAG,SAAS,SAAUvG,GACnCwG,EAAWyC,aAAajJ,EAC1B","sources":["experiments-static/sudoku/utils/Subject.js","experiments-static/sudoku/models/SudokuModel.js","experiments-static/sudoku/views/SudokuViews.js","experiments-static/sudoku/script.js","experiments-static/sudoku/controllers/SudokuController.js"],"sourcesContent":["export default class Subject {\n  constructor () {\n    this._observers = new Set();\n  }\n  \n  registerObserver (obs) {\n    if(!obs.update) {\n      throw new Error(\"No update method on observer\");\n    }\n    this._observers.add(obs);\n  }\n\n  unregisterObserver (obs) {\n    this._observers.remove(obs);\n  }\n\n  notifyObservers (value=this) {\n    for(var obs of this._observers) {\n      obs.update(value);\n    }\n  }\n}","import Subject from \"../utils/Subject.js\";\n\nexport default class InputSudokuModel extends Subject {\n  constructor () {\n    super();\n    this._symbols = new Set();\n    this._boardSize = 9;\n    this.resetBoard();\n    this._solutions = [];\n    this._stats = \"\";\n    this._error_message = \"\";\n    this.textFile = undefined;\n  }\n\n  async setSolutionAndStats () {\n    try {\n      this._error_message = \"\";\n      var [answers, dlxBoard] = await getSolutions(this.boardClone, this.symbols);\n      this._solutions = answers;\n      this._stats = dlxBoard.printStats();\n      this.notifyObservers();\n    } catch (e) {\n      console.error(e);\n      this._error_message = e.message;\n      this._solutions = [];\n      this._stats = \"\";\n      this.notifyObservers();\n    }\n  }\n\n  get error_message () {\n    return this._error_message;\n  }\n\n  get solutions () {\n    return this._solutions;\n  }\n\n  get stats () {\n    return this._stats;\n  }\n\n  resetBoard () {\n    this._board = new Array(this._boardSize).fill(0).map(()=>new Array(this._boardSize).fill(\"-\"));\n  }\n\n  get boardClone () {\n    return this._board.map(a=>a.slice());\n  }\n\n  get board () {\n    return this._board;\n  }\n\n  set boardSize (size) {\n    if([2,3,4,5].map(x=>x**2).indexOf(size) === -1) {\n      throw new Error(\"Invalid board size\");\n    }\n    this._boardSize = size;\n    this.resetBoard();\n    this.notifyObservers();\n  }\n\n  get boardSize () {\n    return this._boardSize;\n  }\n\n  set symbols (symbols) {\n    symbols = [...symbols];\n    if(symbols.some(x=>x.length !== 1)) {\n      throw new Error(\"Some symbols have length greater than 1.\");\n    }\n    this._symbols = new Set(symbols);\n    this.notifyObservers();\n  }\n\n  get symbols () {\n    return this._symbols;\n  }\n\n  setCell (cellIdx, val) {\n    var size = this.boardSize;\n    var row = Math.floor(cellIdx / size);\n    var col = Math.floor(cellIdx % size);\n    if(this.board[row][col] === val) {\n      return;\n    }\n    this.board[row][col] = val;\n    this.notifyObservers();\n  }\n\n  get boardString () {\n    return boardToString(this.board);\n  }\n\n  setCellRowCol (row, col, val) {\n    if(this.board[row][col] === val) {\n      return;\n    }\n    this.board[row][col] = val;\n    this.notifyObservers();\n  }\n\n  makeInputFile () {\n    var data = new Blob([this.boardSize+\"\\n\"+([...this.symbols].join(\" \"))+\"\\n\"+this.boardString], {type: 'text/plain'});\n\n    // If we are replacing a previously generated file we need to\n    // manually revoke the object URL to avoid memory leaks.\n    if (this.textFile !== null) {\n      window.URL.revokeObjectURL(this.textFile);\n    }\n\n    this.textFile = window.URL.createObjectURL(data);\n\n    // returns a URL you can use as a href\n    return this.textFile;\n  }\n\n  getCell (cellIdx) {\n    var size = this.boardSize;\n    var row = Math.floor(cellIdx / size);\n    var col = Math.floor(cellIdx % size);\n    return this.board[row][col];\n  }\n}","var encodeStr = x => x.replace(/[\\u00A0-\\u9999<>\\&]/gim, function(i) {\n  return '&#'+i.charCodeAt(0)+';';\n});\n\nfunction mapJoin (arr, fn) {\n  return arr.map(fn).join(\"\");\n}\n\nfunction timeout (ms) {\n  return new Promise(res=>setTimeout(res, ms));\n}\n\nexport class SudokuInputView {\n  constructor (model, viewItem) {\n    this.model = model;\n    this.view = $(viewItem);\n    this.lastSize = this.model.boardSize;\n    this.model.registerObserver(this);\n    this.lastBoardStr = this.model.boardString;\n    this.render();\n    this.lastUpdateAttempt = Date.now();\n  }\n\n  render () {\n    var i = 0;\n    var cellIdEl = $(document.getSelection().anchorNode);\n    if(!cellIdEl.is(\"input[data-cell-id]\")) {\n      cellIdEl = cellIdEl.find(\"input[data-cell-id]\");\n    }\n    var focusedCell = cellIdEl.attr(\"data-cell-id\");\n    var selection = [(cellIdEl.get(0) || {}).selectionStart, (cellIdEl.get(0) || {}).selectionEnd];\n    this.view.html(\n      `\n      <div class=\"sudoku-board\">\n        ${mapJoin(this.model.board, (row=> {\n          var size = Number(this.model.boardSize);\n          return `<div class=\"sudoku-row clearfix row-${size}x${size}\">\n            ${mapJoin(row, (cellVal=>`<div class=\"cell cell-${size}x${size}\">\n              <div class=\"cell-inner\">\n                <input data-cell-id=\"${i++}\" type=\"text\" value=\"${encodeStr(cellVal)}\">\n              </div>\n            </div>`))}\n          </div>`;\n        }))}\n      </div>`\n    );\n    $(`input[data-cell-id=\"${focusedCell}\"]`).focus();\n    var ifTruthy = (_x, predicate=x=>!!x)=>{\n      var self = {do: function (fn) { return predicate(_x) ? ifTruthy(fn(_x), predicate) : self; }, _x }\n      return self;\n    };\n    //$(`input[data-cell-id=\"${focusedCell}\"]`).get(0).setSelectionRange(...selection)\n    ifTruthy($(`input[data-cell-id=\"${focusedCell}\"]`).get(0)).do(x=>x.setSelectionRange(...selection));\n  }\n\n  async debounce (fn, ms) {\n    var attempt = Date.now();\n    this.lastUpdateAttempt = attempt;\n    await timeout(ms);\n    if(attempt === this.lastUpdateAttempt) {\n      fn();\n    }\n  }\n\n  // only update if the board size changes\n  async update (update) {\n    this.debounce(()=>{\n      if(this.lastBoardStr === this.model.boardString && this.lastSize === this.model.boardSize) {\n        return;\n      }\n      this.lastBoardStr = this.model.boardString;\n      this.lastSize = this.model.boardSize;\n      this.render();\n    }, 1000/40);\n  }\n\n}\n\nfunction setsAreEqual (set1, set2) {\n  return set1.size === set2.size && set1.size == new Set([...set1, ...set2]).size;\n}\n\nexport class SymbolInputView {\n  constructor (model, viewItem) {\n    this.model = model;\n    this.view = $(viewItem);\n    this.lastSymbols = new Set([...this.model.symbols]);\n    this.model.registerObserver(this);\n    this.render();\n  }\n\n  render () {\n    var symbols = this.model.symbols;\n    var input = $('<input class=\"form-control\" type=\"text\">');\n    input.val([...symbols].join(\",\"));\n    input.find(`option[value=\"${this.model.boardSize}\"]`).attr(\"selected\", true)\n    this.view.empty().append(input);\n  }\n\n  update () {\n    if(setsAreEqual(this.lastSymbols, this.model.symbols)) {\n      return;\n    }\n    this.lastSymbols = new Set([...this.model.symbols]);\n    this.render();\n  }\n}\n\nexport class BoardSizeInputView {\n  constructor (model, viewItem) {\n    this.model = model;\n    this.view = $(viewItem);\n    this.lastBoardSize = this.model.boardSize;\n    this.model.registerObserver(this);\n    this.render();\n  }\n\n  render () {\n    this.view = this.view.html(`<select class=\"form-control\">\n      <option value=\"4\">4x4</option>\n      <option value=\"9\">9x9</option>\n      <option value=\"16\">16x16</option>\n      <option value=\"25\">25x25</option>\n    </select>`);\n\n    this.view.find(`option[value=\"${this.model.boardSize}\"]`).attr(\"selected\", true);\n    \n  }\n\n  update () {\n    if(this.lastBoardSize === this.model.boardSize) {\n      return;\n    }\n    this.lastBoardSize = this.model.boardSize;\n    this.render();\n  }\n}\nfunction getSodukuOutputTree (board) {\n  var i = 0;\n  var size = Number(board.length);\n  return `\n  <div class=\"sudoku-board\">\n    ${mapJoin(board, row=> {\n      return `<div class=\"sudoku-row clearfix row-${size}x${size}\">\n        ${mapJoin(row, cellVal=>`<div class=\"cell cell-${size}x${size}\">\n          <div class=\"cell-inner\">\n            ${encodeStr(cellVal)}\n          </div>\n        </div>`)}\n      </div>`;\n    })}\n  </div>`;\n}\nexport class SudokuOutputView {\n  constructor (model, boardOutput) {\n    this.model = model;\n    this.boardOutput = boardOutput;\n    this.lastSize = this.model.boardSize;\n    this.render();\n  }\n\n  render () {\n    \n    $(this.boardOutput).html(\n      \n    );\n  }\n}\n\nexport class OutputView {\n  constructor (model, viewItem) {\n    this.model = model;\n    this.view = $(viewItem);\n    this.lastSize = this.model.boardSize;\n    //this.render();\n    this.model.registerObserver(this);\n    this.lastBoardStr = this.model.boardString;\n    this.lastStats = this.model.stats;\n  }\n\n  render () {\n    var infoLine = \"No Solutions\";\n    var showStats = false;\n    var showError = false;\n    if(this.model.error_message) {\n      infoLine = \"Error\";\n      showError = true;\n    } else if(this.model.solutions.length > 1) {\n      infoLine = \"Multiple Solutions\";\n      showStats = true;\n    } else if(this.model.solutions.length == 1) {\n      infoLine = \"Solved\";\n      showStats = true;\n    }\n    var i = 0;\n    this.view.html(\n      `\n      <h2>Output</h2>\n      <h3>${infoLine}</h3>\n      ${this.model.solutions.map(getSodukuOutputTree).join(\"\")}\n      ${showStats ?\n        `<pre><code>${this.model.stats}</code></pre>`\n        :  \"\" }\n      ${showError ?\n        `<pre><code>${this.model.error_message}</code></pre>`\n        :  \"\" }\n      `\n    );\n  }\n\n  async debounce (fn, ms) {\n    var attempt = Date.now();\n    this.lastUpdateAttempt = attempt;\n    await timeout(ms);\n    if(attempt === this.lastUpdateAttempt) {\n      fn();\n    }\n  }\n\n  update () {\n    this.debounce(()=>{\n      if(this.lastBoardStr === this.model.boardString && !this.model.error_message && this.model.stats === this.lastStats) {\n        return;\n      }\n      this.lastBoardStr = this.model.boardString;\n      this.render();\n    }, 1000/60);\n  }\n}\n  ","import SudokuController from \"./controllers/SudokuController.js\";\n\n$(document.body).on(\"click\", \".cell-inner\", function (e) {\n  $(this).find(\"input\").focus();\n});\n\nvar controller = new SudokuController();\n\ncontroller.inputBoard.on(\"keydown\", '.cell-inner input[type=\"text\"]', function (e) {\n  controller.cellKeydown(this, e);\n});\n\ncontroller.inputBoard.on(\"keyup\", '.cell-inner input[type=\"text\"]', function (e) {\n  controller.cellKeyup(this, e);\n});\n\ncontroller.boardSizeInput.on(\"change\", 'select', function (e) {\n  controller.boardSizeInputChange(this);\n});\ncontroller.symbolInput.on(\"change\", 'input[type=\"text\"]', function (e) {\n  controller.symbolInputChange(this);\n});\n\n$(\"#file_input\").on(\"change\", function () {\n  var reader = new FileReader();\n  reader.onloadend = function (ev) { \n    controller.readBoardFile(this, ev);\n  };\n  reader.readAsText (this.files[0]);\n});\n\n$(\"#submit\").on(\"click\", function (e) {\n  controller.outputSolutions();\n})\n\n$(\"#download\").on(\"click\", function (e) {\n  controller.downloadFile(e);\n})\n\n","import InputSudokuModel from \"../models/SudokuModel.js\";\nimport {SudokuInputView, SudokuOutputView, SymbolInputView, BoardSizeInputView, OutputView} from \"../views/SudokuViews.js\";\n\nexport default class SudokuController {\n  constructor () {\n    this.model = new InputSudokuModel();\n\n    this.boardSizeInput = $(\"#sudoku-boardSizeInput\");\n    this.symbolInput = $(\"#sudoku-symbolInput\");\n    this.inputBoard = $(\"#sudoku-inputBoard\");\n    this.output = $(\"#output\");\n    \n    this.boardInputView = new SudokuInputView(this.model, this.inputBoard);\n    this.symbolInputView = new SymbolInputView(this.model, this.symbolInput);\n    this.sizeInputView = new BoardSizeInputView(this.model, this.boardSizeInput);\n    this.outputView = new OutputView(this.model, this.output);\n  }\n\n  cellKeyup (cell, e) {\n    var key = e.key;\n\n    // var val = $(cell).val();\n    // if(!val) {\n    //   val = \"-\";\n    //   $(cell).val(val);\n    // }\n    if (!this.validKey(key)) { \n      //e.preventDefault();\n      return;\n    }\n    var cellId = parseInt($(cell).attr(\"data-cell-id\"), 10);\n    this.model.setCell(cellId, key);\n  }\n\n  validKey (key) {\n    var keys = [...this.model.symbols, \"-\"];\n    return new Set(keys).has(key);\n  }\n\n  isActionKeyCode (keyCode) {\n    return new Set([17,9,16,8]).has(keyCode);\n  }\n\n  isDirectionalKeyCode (keyCode) {\n    return new Set([37,38,39,40]).has(keyCode);\n  }\n\n  cellInBounds (cell) {\n    return cell >= 0 && cell < this.model.boardSize*this.model.boardSize;\n  }\n\n  changeCell (newCell, oldCell) {\n    var squaresRowCol = this.model.boardSize;\n    var squaresBoard = this.model.boardSize**2;\n    if(Math.abs(newCell - oldCell) === 1) {\n      var row = Math.floor(oldCell / squaresRowCol);\n      newCell = row*squaresRowCol + (newCell + squaresRowCol) % squaresRowCol;\n    } else {\n      newCell =  (newCell + squaresBoard) % squaresBoard\n    }\n    return this.cellInBounds(newCell) ? newCell : oldCell;\n  }\n\n  handleDirectionalKeyCode (cell, keyCode) {\n    var currCell = parseInt($(cell).attr(\"data-cell-id\"));\n    switch(keyCode) {\n      case 37:\n      // left\n      $(`[data-cell-id=\"${this.changeCell(currCell-1, currCell)}\"]`).focus();\n      break;\n      case 38:\n      // up\n      $(`[data-cell-id=\"${this.changeCell(currCell-this.model.boardSize, currCell)}\"]`).focus();\n      break;\n      case 39:\n      // right\n      $(`[data-cell-id=\"${this.changeCell(currCell+1, currCell)}\"]`).focus();\n      break;\n      case 40:\n      // down\n      $(`[data-cell-id=\"${this.changeCell(currCell+this.model.boardSize, currCell)}\"]`).focus();\n      break;\n    }\n  }\n\n  cellKeydown (cell, e) {\n    var key = e.key;\n    var keyCode = e.keyCode || e.which;\n    \n    if(!this.validKey(key)) {\n      if(this.isDirectionalKeyCode(keyCode)) {\n        this.handleDirectionalKeyCode(cell, keyCode);\n        return;\n      }\n      if(this.isActionKeyCode(keyCode)) {\n        if(keyCode === 8) {\n          $(cell).val(\"\");\n          this.cellKeyup(cell,{keyCode: 189, key: \"-\"});\n        }\n      }\n      e.preventDefault();\n      return;\n    }\n    \n    $(cell).val(\"\");\n  }\n\n  outputSolutions() {\n    this.model.setSolutionAndStats();\n  }\n\n  boardSizeInputChange (input, e) {\n    this.model.boardSize = parseInt($(input).val(), 10);\n  }\n\n  readBoardFile (el, e) {\n    var input = el.result;\n    var {\n      boardSize,\n      symbolset,\n      board\n    } = parseBoard(input);\n    this.model.boardSize = boardSize;\n    this.model.symbols = symbolset;\n    for(var i = 0; i < boardSize;++i) {\n      for(var j = 0; j < boardSize;++j) {\n        this.model.setCellRowCol(i, j, board[i][j]);\n      }  \n    }\n  }\n\n  downloadFile (e) {\n    var link = document.createElement('a');\n    var size = Number(this.model.boardSize);\n    link.setAttribute('download', `sudoku_board${size}x${size}.txt`);\n    link.href = this.model.makeInputFile();\n    document.body.appendChild(link);\n\n    // wait for the link to be added to the document\n    window.requestAnimationFrame(function () {\n      var event = new MouseEvent('click');\n      link.dispatchEvent(event);\n      document.body.removeChild(link);\n    });\n  }\n\n  symbolInputChange (input, e) {\n    this.model.symbols = $(input).val().split(\",\");\n  }\n}\n"],"names":["$ed4843cccbd2886a$export$2e2bcd8739ae039","constructor","this","_observers","Set","registerObserver","obs","update","Error","add","unregisterObserver","remove","notifyObservers","value","$6768801ec094b504$export$2e2bcd8739ae039","super","_symbols","_boardSize","resetBoard","_solutions","_stats","_error_message","textFile","undefined","async","answers","dlxBoard","getSolutions","boardClone","symbols","printStats","e","console","error","message","error_message","solutions","stats","_board","Array","fill","map","a","slice","board","boardSize","size","x","indexOf","some","length","setCell","cellIdx","val","row","Math","floor","col","boardString","boardToString","setCellRowCol","makeInputFile","data","Blob","join","type","window","URL","revokeObjectURL","createObjectURL","getCell","$0787b21580af986b$var$encodeStr","replace","i","charCodeAt","$0787b21580af986b$var$mapJoin","arr","fn","$0787b21580af986b$var$timeout","ms","Promise","res","setTimeout","$0787b21580af986b$export$597ff4863dfee166","model","viewItem","view","$","lastSize","lastBoardStr","render","lastUpdateAttempt","Date","now","cellIdEl","document","getSelection","anchorNode","is","find","focusedCell","attr","selection","get","selectionStart","selectionEnd","html","Number","cellVal","focus","ifTruthy","_x","predicate","self","do","setSelectionRange","attempt","debounce","$0787b21580af986b$export$d0328d34d5fa339","lastSymbols","input","empty","append","set1","set2","$0787b21580af986b$export$a230c5e9c850edc2","lastBoardSize","$0787b21580af986b$var$getSodukuOutputTree","$0787b21580af986b$export$fa85ae460c856c26","lastStats","infoLine","showStats","showError","body","on","$edd758175819d2b2$var$controller","boardSizeInput","symbolInput","inputBoard","output","boardInputView","symbolInputView","sizeInputView","outputView","cellKeyup","cell","key","validKey","cellId","parseInt","keys","has","isActionKeyCode","keyCode","isDirectionalKeyCode","cellInBounds","changeCell","newCell","oldCell","squaresRowCol","squaresBoard","abs","handleDirectionalKeyCode","currCell","cellKeydown","which","preventDefault","outputSolutions","setSolutionAndStats","boardSizeInputChange","readBoardFile","el","result","symbolset","parseBoard","j","downloadFile","link","createElement","setAttribute","href","appendChild","requestAnimationFrame","event","MouseEvent","dispatchEvent","removeChild","symbolInputChange","split","reader","FileReader","onloadend","ev","readAsText","files"],"version":3,"file":"index.4ad945f8.js.map"}