{"mappings":"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","sources":["experiments-static/maze-solver/modules/MazeRenderer.js"],"sourcesContent":["window.MazeRenderer = (function (GameOverRenderer) {\n\n  var dirAddition = {\n    n: {\n      x1: 0,\n      y1: 0,\n      x2: 1,\n      y2: 0,\n    },\n    w: {\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 1,\n    },\n    e: {\n      x1: 1,\n      y1: 0,\n      x2: 1,\n      y2: 1,\n    },\n    s: {\n      x1: 0,\n      y1: 1,\n      x2: 1,\n      y2: 1,\n    },\n  };\n\n  return function _MazeRenderer (context, {\n    mazeSize = 1000, \n    mazeNumRowsCols = 20,\n    wallColor = \"#fff\",\n    wallSizeFactor = 0.1,\n    borderColor = \"#777\",\n    playerColor = \"cornflowerblue\",\n    startColor = 'rgba(100, 237, 127, 0.5)',\n    finishColor = 'rgba(237, 100, 100, 0.5)',\n    circleRadiusFactor = 0.5,\n    circleStrokeSizeFactor = 0.2,\n    hintColor = (alpha) => `rgba(237, 237, 100,${alpha})`,\n    fontFamily = \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif\",\n  } = {}) {\n    var cellSize = mazeSize / mazeNumRowsCols;\n    var wallSize = cellSize * wallSizeFactor;\n    var circleRadius = 0.5 * circleRadiusFactor * cellSize;\n    var circleStrokeSize = 0.5 * circleRadiusFactor * circleStrokeSizeFactor * cellSize;\n\n    function clear () {\n      context.clearRect(0, 0, mazeSize, mazeSize);\n    }\n\n    function renderBorder () {\n      context.save();\n      context.strokeStyle = borderColor;\n      context.beginPath();\n      context.moveTo(0, 0);\n      context.lineTo(mazeSize, 0);\n      context.lineTo(mazeSize, mazeSize);\n      context.lineTo(0, mazeSize);\n      context.closePath();\n      context.stroke();\n      context.restore();\n    }\n\n    function renderInnerWalls (maze) {\n      context.save();\n      context.strokeStyle = wallColor;\n      context.strokeSize = wallSize;\n      context.beginPath();\n      for(var [dir, node] of maze.walls) {\n        var deltas = dirAddition[dir];\n        context.moveTo((node.x + deltas.x1) * cellSize, (node.y + deltas.y1) * cellSize);\n        context.lineTo((node.x + deltas.x2) * cellSize, (node.y + deltas.y2) * cellSize);\n      }\n      context.stroke();\n      context.restore();\n    }\n\n    function drawCircle (spec) {\n      context.save();\n      context.beginPath();\n      context.arc(spec.center.x, spec.center.y, spec.radius, 0, 2 * Math.PI, false);\n      context.fillStyle = spec.fillStyle;\n      context.fill();\n      context.lineWidth = spec.strokeSize;\n      context.strokeStyle = spec.strokeStyle;\n      context.stroke();\n  \n      context.restore();\n    }\n\n    function renderPlayer (player) {\n      context.save();\n      drawCircle({\n        center: {\n          x: (player.position.x + 0.5) * cellSize,\n          y: (player.position.y + 0.5) * cellSize\n        },\n        // max-radius should be 1/2 the cell so that it fits in the cell\n        radius: circleRadius,\n        strokeSize: circleStrokeSize,\n        strokeStyle: '#ccc',\n        fillStyle: playerColor\n      })\n      context.restore();\n    }\n\n    /**\n     * A functional binary search method takes a directionDecider function and supplies\n     * @param {Number} min \n     * min number to search with\n     * @param {Number} max \n     * max number to search with\n     * @param {Function} directionDecider\n     * directionDecider has signature, (SearchItem: Number) => Direction: Number, \n     * and should return  a positive number for going higher \n     * a negative number for searching lower and 0 if the search element is found.\n     */\n    function binSearch (min, max, directionDecider) {\n      if(min > max) {\n        return [max, undefined, min];\n      }\n      var mid = Math.floor((min + max) / 2)\n      var dir = directionDecider(mid);\n      if(dir < 0) {\n        return binSearch(min, mid - 1, directionDecider);\n      } else if (dir > 0) {\n        return binSearch(mid + 1, max, directionDecider);\n      } else {\n        return [mid-1, mid, mid+1]\n      }\n    }\n\n    function getFontSizeForWidth (text, width) {\n      context.save();\n      var fontSizes = binSearch(2, width, (size) => {\n        var minFontSize = 0;\n        context.font = `${size}px ${fontFamily}`;\n        return width - context.measureText(text);\n      });\n      context.restore();\n      return fontSizes[1] || fontSizes[0];\n    }\n\n    function getFontSizeForHeight (height) {\n      return getFontSizeForWidth('m', height);\n    }\n\n    function drawCenteredCellText (cell, text, padding=0.2*cellSize) {\n      context.save();\n      context.font = `${getFontSizeForWidth(text, cellSize-padding*2)}px ${fontFamily}`;\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      // var textHeight = context.measureText('m');\n      // var textWidth = context.measureText('Finish');\n      context.fillText(text, (cell.x + 0.5) * cellSize, (cell.y + 0.5) * cellSize);\n      context.restore();\n    }\n\n    function drawSquare (spec) {\n      context.save();\n\n      context.fillStyle = spec.fillStyle;\n      context.fillRect(spec.x, spec.y, spec.width, spec.height);\n\n      // context.strokeStyle = spec.strokeStyle;\n      // context.strokeRect(spec.x, spec.y, spec.width, spec.height);\n\n      context.restore();\n    }\n\n    function renderFinish (cell) {\n      drawSquare({\n        x: cell.x * cellSize,\n        y: cell.y * cellSize,\n        width: cellSize,\n        height: cellSize,\n        fillStyle: finishColor,\n        strokeStyle: '#ccc',\n      });\n      drawCenteredCellText(cell, 'Finish');\n    }\n\n    function renderStart (cell) {\n      drawSquare({\n        x: cell.x * cellSize,\n        y: cell.y * cellSize,\n        width: cellSize,\n        height: cellSize,\n        fillStyle: startColor,\n        strokeStyle: '#ccc',\n      });\n      drawCenteredCellText(cell, 'Start');\n    }\n\n    var fadeAlpha = (function () {\n      var t = 0;\n      return function _fadeAlpha (delta, max) {\n        var maxInterVal = Math.floor(max / 2);\n        var fullVal = (t + delta) % max;\n        var halfVal = (t + delta) % maxInterVal;\n        var changeRatio = +(halfVal / maxInterVal).toFixed(2);\n        if(fullVal > halfVal) {\n          t += delta;\n          t %= max;\n          // delta is negative\n          return +(1-changeRatio).toPrecision(2);;\n        } else { \n          t += delta;\n          t %= max;\n          // delta is positive\n          return changeRatio;\n        }\n      }\n    })();\n\n    var alpha = 0;\n    function renderHint (elapsed, cell, timeReset=(2*10**3)) {\n      if(!cell) {\n        return;\n      }\n      console.log(alpha);\n      alpha = fadeAlpha(elapsed, timeReset);\n\n      drawSquare({\n        x: cell.x * cellSize,\n        y: cell.y * cellSize,\n        width: cellSize,\n        height: cellSize,\n        fillStyle: hintColor('' + alpha),\n        strokeStyle: '#ccc',\n      });\n    }\n\n    function render (elapsed, maze, gameState) {\n      if(gameState.hintOn || gameState.isDirty) {\n        clear();\n        renderBorder();\n        renderInnerWalls(maze);\n        renderFinish(gameState.finish);\n        renderStart(gameState.start);\n        if (gameState.hintOn) {\n          renderHint(elapsed, gameState.shortestPath[1]);\n        }\n        if(gameState.breadCrumbsOn) {\n          renderBreadCrumbs(maze.matrix);\n        }\n        if(gameState.shortestPathOn) {\n          renderPathToFinish(gameState.shortestPath);\n        }\n        renderPlayer(gameState.player);\n      }\n      gameState.isDirty = false;\n    }\n\n    function renderFinishCircle (cell) {\n      context.save();\n      context.beginPath();\n      var centerX = (cell.x + 0.5) * cellSize;\n      var centerY = (cell.y + 0.5) * cellSize;\n      drawCircle({\n        fillStyle: 'transparent',\n        strokeStyle: 'transparent',\n        strokeSize: 0.2 * cellSize,\n        center: {\n          x: centerX,\n          y: centerY,\n        },\n        radius: circleRadius,\n        strokeSize: circleStrokeSize,\n      });\n      context.clip();\n      // draw checkerboard\n\n      var black = 'rgba(0,0,0,0.5)';\n      var white = 'rgba(255,255,255,0.5)';\n      ([\n        [\n          centerX - circleRadius,\n          centerY - circleRadius,\n          black\n        ],\n        [\n          centerX,\n          centerY - circleRadius,\n          white\n        ],\n        [\n          centerX - circleRadius,\n          centerY,\n          white\n        ],\n        [\n          centerX,\n          centerY,\n          black\n        ],\n      ]).forEach(function ([x, y, fillStyle]) {\n        drawSquare({\n          x: x,\n          y: y,\n          width: cellSize / 2,\n          height: cellSize / 2,\n          fillStyle: fillStyle,\n        });\n      });\n      context.restore();\n\n      drawCircle({\n        fillStyle: 'transparent',\n        strokeStyle: hintColor(1),\n        strokeSize: 0.2 * cellSize,\n        center: {\n          x: centerX,\n          y: centerY,\n        },\n        radius: circleRadius,\n        strokeSize: circleStrokeSize,\n      });\n      \n    }\n\n    function drawBreadCrumb (cell) {\n      var centerX = (cell.x + 0.5) * cellSize;\n      var centerY = (cell.y + 0.5) * cellSize;\n      drawCircle({\n        fillStyle: 'transparent',\n        strokeStyle: borderColor,\n        strokeSize: 0.2 * cellSize,\n        center: {\n          x: centerX,\n          y: centerY,\n        },\n        radius: circleRadius,\n        strokeSize: circleStrokeSize,\n      });\n    }\n\n    function renderBreadCrumbs (maze) {\n      for(var row of maze) {\n        for(var cell of row) {\n          if(cell.visited) {\n            drawBreadCrumb(cell);\n          }\n        }\n      }\n    }\n\n    function renderPathToFinish (path=[]) {\n      for(var node of path) {\n        renderFinishCircle(node);\n      }\n    }\n\n    return {\n      renderInnerWalls,\n      renderBorder,\n      clear,\n      renderPlayer,\n      renderFinish,\n      renderStart,\n      render\n    }\n  };\n})();\n"],"names":["window","MazeRenderer","GameOverRenderer","dirAddition","n","x1","y1","x2","y2","w","e","s","context","mazeSize","mazeNumRowsCols","wallColor","wallSizeFactor","borderColor","playerColor","startColor","finishColor","circleRadiusFactor","circleStrokeSizeFactor","hintColor","alpha","fontFamily","cellSize","wallSize","circleRadius","circleStrokeSize","clear","clearRect","renderBorder","save","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","restore","renderInnerWalls","maze","dir","node","strokeSize","walls","deltas","x","y","drawCircle","spec","arc","center","radius","Math","PI","fillStyle","fill","lineWidth","renderPlayer","player","position","binSearch","min","max","directionDecider","undefined","mid","floor","getFontSizeForWidth","text","width","fontSizes","size","font","measureText","drawCenteredCellText","cell","padding","textAlign","textBaseline","fillText","drawSquare","fillRect","height","renderFinish","renderStart","t","fadeAlpha","delta","maxInterVal","fullVal","halfVal","changeRatio","toFixed","toPrecision","renderFinishCircle","centerX","centerY","clip","black","white","forEach","drawBreadCrumb","render","elapsed","gameState","hintOn","isDirty","finish","start","timeReset","console","log","renderHint","shortestPath","breadCrumbsOn","row","visited","renderBreadCrumbs","matrix","shortestPathOn","path","renderPathToFinish"],"version":3,"file":"index.7244030d.js.map"}