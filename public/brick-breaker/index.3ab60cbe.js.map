{"mappings":"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","sources":["experiments-static/brick-breaker/modules/GameState.js"],"sourcesContent":["window.GameState = function GameState (spec) {\n  var that = {};\n  that.winner = false;\n\n  that.unit = spec.unit;\n  that.width = spec.width;\n  that.height = spec.height;\n  that.maxPoints = 0;\n  that.removedBricks = new Set();\n\n  /**\n   * GameState private variables with getters and setters\n   */\n  (()=>{\n    var _points = 0;\n    Object.defineProperty(that, 'points', {\n      get () {\n        return _points;\n      },\n      set (val) {\n        if(Math.floor(val/100) - Math.floor(_points/100) >= 1) {\n          that.balls.add(Ball());\n        }\n        _points = val;\n      }\n    });\n    var _paused = false;\n    Object.defineProperty(that, 'paused', {\n      get () {\n        return _paused;\n      },\n      set (val) {\n        _paused = !!val\n      }\n    });\n    var _ready = false;\n    Object.defineProperty(that, 'ready', {\n      get () {\n        if(that.paused) {\n          return false;\n        } else {\n          return _ready;\n        }\n      },\n      set (val) {\n        _ready = !!val;\n      }\n    });\n  })();\n  const lineBonus = 25;\n  that.paddlesLeft = 3;\n  that.gameOver = false;\n  const fullSizePaddleWidth = spec.unit * 20;\n\n  \n\n  function doCountDown () {\n    that.ready = false;\n    that.countdown = 3;\n    var countDown = setInterval(function cd () {\n      if(that.paused) {\n        return;\n      }\n      that.countdown -= 1;\n      if(that.countdown === 0) {\n        that.ready = true;\n        clearInterval(countDown);\n      }\n    }, 1000);\n  }\n\n  doCountDown();\n\n  function RowRect (rowOfRectangles) {\n    var first = rowOfRectangles[0];\n    var last = rowOfRectangles[rowOfRectangles.length - 1]\n    return Geometry.Rectangle({\n      x: first.left,\n      y: first.top,\n      width: last.right - first.left,\n      height: last.bottom - first.top\n    });\n  }\n\n  function MatrixRect (matrixOfRectangles) {\n    var first = matrixOfRectangles[0][0];\n    var last = matrixOfRectangles[matrixOfRectangles.length - 1][matrixOfRectangles[0].length - 1];\n    return Geometry.Rectangle({\n      x: first.left,\n      y: first.top,\n      width: last.right - first.left,\n      height: last.bottom - first.top\n    });\n  }\n  var matrixRect = null;\n  var rowRects = [];\n\n  /**\n   * Update method for gameloop.\n   * @param {Number} elapsed\n   * number of milliseconds elapsed since last update \n   */\n  that.update = function update (elapsed) {\n    for(var ball of that.balls) {\n      ball.paddleContact = false;\n      ball.brickContact = false;\n      ball.wallContact = false;\n      if(!that.ready) {\n        return;\n      }\n      if(ball.x + ball.radius > spec.width) {\n        ball.reflectLeft();\n        ball.wallContact = true;\n      }\n      if(ball.y - ball.radius < 0) {\n        ball.reflectDown();\n        ball.wallContact = true;\n      }\n      if(ball.y - ball.radius > spec.height) {\n        // reset ball remove paddle\n        that.balls.delete(ball);\n        if(that.balls.size === 0) {\n          that.paddlesLeft--;\n          if(that.paddlesLeft === 0) {\n            that.gameOver = true;\n            spec.gameOver(that);\n            return;\n          }\n          doCountDown();\n          resetPaddle();\n          that.balls.add(Ball());\n        }\n        continue;\n      }\n      if(ball.x - ball.radius < 0) {\n        ball.reflectRight();\n        ball.wallContact = true;\n      }\n      if(ball.boundingRect.intersectsRect(that.paddle)) {\n        ball.reflectUp();\n        ball.deltaPerMS.x = ball.speed * (ball.x - that.paddle.center.x) / (that.paddle.width / 2);\n        ball.paddleContact = true;\n      }\n      var ballBoundingRect = ball.boundingRect;\n      if(ballBoundingRect.intersectsRect(matrixRect)) {\n        for(var i = 0; i < that.bricks.length; ++i) {\n          const brickRow = that.bricks[i];\n          if(brickRow.length === 0 || !ballBoundingRect.intersectsRect(rowRects[i])) {\n            continue;\n          }\n          for(var brick of brickRow) {\n            var intersection = ballBoundingRect.intersectsRect(brick);\n            if(intersection) { \n              if(i === 0) {\n                that.paddle.width = fullSizePaddleWidth / 2;\n              }\n  \n              that.removedBricks.add(brick);\n              ball.brickContact = true;\n              ball.breaks++;\n              that.points += brick.points;\n              switch(intersection) {\n                case 'top':\n                ball.reflectUp();\n                break;\n                case 'bottom':\n                ball.reflectDown();\n                break;\n                case 'right':\n                ball.reflectRight();\n                break;\n                case 'left':\n                ball.reflectLeft();\n                break;\n              }\n            }\n          }\n        }\n      }\n      ball.x += ball.deltaPerMS.x * elapsed;\n      ball.y += ball.deltaPerMS.y * elapsed;\n    }\n    if(that.removedBricks.size > 0) {\n      that.bricks = that.bricks.map(r => {\n        if (r.length == 0) {\n          return [];\n        }\n        var q = r.filter(x => !that.removedBricks.has(x))\n        if(q.length === 0) {\n          that.points += lineBonus;\n        }\n        return q;\n      });\n      \n      if(that.bricks.every(x => x.length === 0)) {\n        that.gameOver = true;\n        that.winner = true;\n        // final extra points for more competitive high scores.\n        that.points += that.balls.size * 3 + that.paddlesLeft * 5\n        spec.gameOver(that);\n      }\n    }\n  };\n\n  /**\n   * that.bricks initialization\n   */\n  (function buildBricks () {\n    // rows will be rendered held top to bottom\n    var margin = 5;\n    var height = 0.35*spec.height;\n    var heightOffset = 0.2*spec.height;\n    // notice how these two arrays are reversed\n    // yellow, orange, blue, green \n    var rowColors = ['#FFD87D', '#FFD87D', '#FFAC69', '#FFAC69', '#85D1C2', '#85D1C2', '#D3F05F', '#D3F05F'].reverse();\n    var rowPoints = [1,1,2,2,3,3,5,5].reverse();\n    const numRows = rowColors.length;\n    const numCols = 14;\n    that.maxPoints = rowPoints.reduce((a,b) => a+b*numCols, 0) + rowPoints.length * lineBonus;\n    that.bricks = [];\n    for(var rowNum = 0; rowNum < numRows; ++rowNum) {\n      that.bricks[rowNum] = [];\n      for(var cellNum = 0; cellNum < numCols; ++cellNum) {\n        that.bricks[rowNum][cellNum] = Geometry.Rectangle({\n          // margins on the left and right and all in between\n          width: (spec.width-(numCols+1)*margin) / numCols,\n          // no margin on the top and bottom but all in between\n          height: (height-(numRows-1)*margin) / numRows,\n        });\n        let brick = that.bricks[rowNum][cellNum];\n        // start with a beginning margin\n        brick.x = margin*(cellNum+1) + brick.width * cellNum;\n        // begin with no margin\n        brick.y = heightOffset + margin*(rowNum) + brick.height * rowNum;\n        brick.color = rowColors[rowNum];\n        brick.points = rowPoints[rowNum];\n        brick.broken = false;\n      }\n    }\n    matrixRect = MatrixRect(that.bricks);\n    rowRects = that.bricks.map(row => RowRect(row))\n\n  })();\n\n  that.paddle = Geometry.Rectangle({\n    width: fullSizePaddleWidth,\n    height: spec.unit * 4,\n  });\n\n  function unitPerFrame (n) {\n    return spec.unit / (1000/60) * n\n  }\n\n  resetPaddle();\n\n  that.paddle.y = spec.height - that.paddle.height - that.paddle.height * 2;\n  that.paddle.color = 'cornflowerblue';\n\n  function resetPaddle () {\n    that.paddle.speed = unitPerFrame(2);\n    that.paddle.x = spec.width / 2 - that.paddle.width / 2;\n    that.paddle.width = fullSizePaddleWidth;\n  }\n\n  function getNextBallColors(arr) {\n    return () => {\n      var color = arr.shift();\n      arr.push(color);\n      return color;\n    }\n  }\n  var ballColorGenerator = getNextBallColors(['tomato', 'gold', 'DarkTurquoise', 'DarkSlateGrey', 'LightGreen']);\n  function Ball () {\n    var ball = {};\n    ball = Geometry.Circle({\n      radius: spec.unit * 2,\n    });\n\n    ball.color= ballColorGenerator();\n\n    var _breaks = 0;\n    Object.defineProperty(ball, 'breaks', {\n      get () {\n        return _breaks;\n      },\n      set (val) {\n        _breaks = val;\n        if(val >= 62) {\n          ball.speed = unitPerFrame(2.5)\n        } else if (val >= 36) {\n          ball.speed = unitPerFrame(2)\n        } else if (val >= 12) {\n          ball.speed = unitPerFrame(1.5)\n        } else if (val >= 4) {\n          ball.speed = unitPerFrame(1)\n        }\n      }\n    });\n\n    // the balls x and y is it's center\n    ball.x = that.paddle.width / 2 + that.paddle.x;\n    ball.y = that.paddle.top - that.paddle.height / 2 - ball.radius;\n    var _speed = unitPerFrame(0.5)\n    Object.defineProperty(ball, 'speed', {\n      get () {\n        return _speed;\n      },\n      set (val) {\n        if(_speed !== val) {\n          ball.deltaPerMS.x *= val / _speed;\n          ball.deltaPerMS.y *= val / _speed;\n          _speed = val;\n        }\n      }\n    });\n    ball.deltaPerMS = {\n      x: ball.speed,\n      y: -ball.speed,\n    };\n    ball.paddleContact = false;\n    ball.brickContact = false;\n    ball.wallContact = false;\n    ball.reflectLeft = function () {\n      ball.deltaPerMS.x = -1 * Math.abs(ball.deltaPerMS.x);\n    }\n    ball.reflectRight = function () {\n      ball.deltaPerMS.x = Math.abs(ball.deltaPerMS.x);\n    }\n    ball.reflectDown = function () {\n      ball.deltaPerMS.y = Math.abs(ball.deltaPerMS.y);\n    }\n    ball.reflectUp = function () {\n      ball.deltaPerMS.y = -1 * Math.abs(ball.deltaPerMS.y);\n    }\n\n    return ball;\n  }\n\n  that.balls = new Set([Ball()]);\n  \n  return that;\n};\n"],"names":["window","GameState","spec","that","unit","width","height","maxPoints","removedBricks","Set","_points","Object","defineProperty","get","set","val","Math","floor","balls","add","Ball","_paused","_ready","paused","paddlesLeft","gameOver","fullSizePaddleWidth","doCountDown","ready","countdown","countDown","setInterval","clearInterval","matrixRect","rowRects","unitPerFrame","n","resetPaddle","paddle","speed","x","update","elapsed","ball","paddleContact","brickContact","wallContact","radius","reflectLeft","y","reflectDown","delete","size","reflectRight","boundingRect","intersectsRect","reflectUp","deltaPerMS","center","ballBoundingRect","i","bricks","length","brickRow","brick","intersection","breaks","points","map","r","q","filter","has","every","winner","heightOffset","rowColors","reverse","rowPoints","numRows","reduce","a","b","rowNum","cellNum","Geometry","Rectangle","color","broken","matrixOfRectangles","first","last","left","top","right","bottom","row","rowOfRectangles","RowRect","arr","ballColorGenerator","shift","push","Circle","_breaks","_speed","abs"],"version":3,"file":"index.3ab60cbe.js.map"}