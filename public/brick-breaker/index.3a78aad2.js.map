{"mappings":"AAAAA,OAAOC,aAAe,SAAuBC,GAC3C,IAAIC,EAAO,C,QACTC,E,SAcF,YAAsBC,GACpB,IAAI,IAAIC,KAAQD,EACdD,EAAQE,EAEZ,E,SAhBEC,GAkBF,SAASH,EAASE,GACXH,EAAKE,MAAMG,IAAIF,KAIpBG,GAAG,0BAA0BH,EAAKI,SAASC,SAAQC,IACjDA,EAAGC,iBAAiB,SAAS,SAAUC,GACrCP,EAASQ,KAAKC,QAAQC,eACxB,OAEFX,EAAKY,OACLf,EAAKE,MAAMc,IAAIb,EAAKI,KAAMJ,GAC5B,CAEA,SAASc,EAAcC,EAAOC,GAC5B,OAAOC,OAAOC,OAAOH,EAAM,CACzBX,KAAMY,GAEV,CAEA,SAASf,EAAUe,KAAaG,GAC9B,IAAInB,EAAOH,EAAKE,MAAMG,IAAIc,GAC1B,GAAKhB,EACAH,EAAKuB,cACNjB,GAAG,eAAeN,EAAKuB,YAAYhB,UAAUC,SAAQC,IACnDA,EAAGe,UAAUC,IAAI,aAEnBzB,EAAKuB,YAAYG,YAEnBpB,GAAG,eAAeH,EAAKI,UAAUC,SAAQC,IACvCA,EAAGe,UAAUG,OAAO,aAEtB3B,EAAK4B,OAAOC,cAAcZ,EAAa,IAAIa,MAAM,gBAAiB3B,EAAKI,OACvEJ,EAAK4B,UAAUT,GACftB,EAAKgC,aAAehC,EAAKuB,YACzBvB,EAAKuB,YAAcpB,EACnBH,EAAK4B,OAAOC,cAAcZ,EAAa,IAAIa,MAAM,eAAgB3B,EAAKI,WACjE,CACL,IAAGR,EAUD,MAAM,IAAIkC,MAAMC,QAThB,IACEnC,EAAUK,SAASe,EACrB,CAAE,MAAOR,GACP,MAAMwB,EAAS,kBAAkBhB,cACjC,GAAGR,EAAEyB,UAAYD,EACf,MAAM,IAAIF,MAAME,EAEpB,CAIJ,CACF,CAEA,OApEA7B,GAAG,eAAeE,SAAQC,IACxBA,EAAGe,UAAUC,IAAI,aAGnBzB,EAAKE,MAAQ,IAAImC,IACjBrC,EAAK4B,OAASU,SAASC,cAAc,OACrCvC,EAAKgC,aAAe,KACpBhC,EAAKuB,YAAc,KA6DZvB,CACT","sources":["experiments-static/brick-breaker/modules/ViewSwitcher.js"],"sourcesContent":["window.ViewSwitcher = function ViewSwitcher (superView) {\n  var that = {\n    addView,\n    addViews,\n    loadView,\n  };;\n\n  $$('[data-view]').forEach(el => {\n    el.classList.add('hidden');\n  })\n\n  that.views = new Map();\n  that.events = document.createElement('div');\n  that.previousView = null;\n  that.currentView = null;\n\n  function addViews (...views) {\n    for(var view of views) {\n      addView(view);\n    }\n  }\n  \n  function addView (view) {\n    if(!!that.views.get(view)) {\n      // View is already added ignore it.\n      return;\n    }\n    $$(`[data-view-transition=\"${view.name}\"`).forEach(el => {\n      el.addEventListener('click', function (e) {\n        loadView(this.dataset.viewTransition);\n      })\n    });\n    view.init();\n    that.views.set(view.name, view);\n  }\n\n  function wrapWithName (event, viewName) {\n    return Object.assign(event,{\n      name: viewName,\n    });\n  }\n\n  function loadView (viewName, ...args) {\n    let view = that.views.get(viewName);\n    if(!!view) {\n      if(that.currentView) {\n        $$(`[data-view=\"${that.currentView.name}\"]`).forEach(el => {\n          el.classList.add('hidden');\n        })\n        that.currentView.unrender();\n      }\n      $$(`[data-view=\"${view.name}\"]`).forEach(el => {\n        el.classList.remove('hidden');\n      })\n      that.events.dispatchEvent(wrapWithName(new Event('view-loading'), view.name));\n      view.render(...args);\n      that.previousView = that.currentView;\n      that.currentView = view;\n      that.events.dispatchEvent(wrapWithName(new Event('view-loaded'), view.name))\n    } else {\n      if(superView) {\n        try {\n          superView.loadView(viewName)\n        } catch (e) {\n          const errMsg = `No such view, '${viewName}', to load`;\n          if(e.message !== errMsg) {\n            throw new Error(errMsg);\n          } \n        }\n      } else {\n        throw new Error(errMsg);\n      }\n    }\n  }\n\n  return that;\n}\n"],"names":["window","ViewSwitcher","superView","that","addView","views","view","loadView","get","$$","name","forEach","el","addEventListener","e","this","dataset","viewTransition","init","set","wrapWithName","event","viewName","Object","assign","args","currentView","classList","add","unrender","remove","events","dispatchEvent","Event","render","previousView","Error","errMsg","errMsg1","message","Map","document","createElement"],"version":3,"file":"index.3a78aad2.js.map"}