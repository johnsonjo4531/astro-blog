{"mappings":"AAAAA,OAAOC,SAAW,WAmChB,SAASC,EAAWC,GAElB,IAAIC,EAAS,CACPC,QACF,OAAOC,EAAKD,EAAIC,EAAKC,MAAQ,CAC/B,EACIC,QACF,OAAOF,EAAKE,EAAIF,EAAKG,OAAS,CAChC,GAEEH,EAAO,CACTG,OAAQN,EAAKM,OACbF,MAAOJ,EAAKI,MACZF,EAAGF,EAAKE,EACRG,EAAGL,EAAKK,EACJE,UACF,OAAOJ,EAAKE,CACd,EACIG,WACF,OAAOL,EAAKD,CACd,EACIO,YACF,OAAON,EAAKD,EAAIC,EAAKC,KACvB,EACIM,aACF,OAAOP,EAAKE,EAAIF,EAAKG,MACvB,EACIL,aACF,OAAOA,CACT,EACAU,eAAgBC,GAEd,MAAMC,EAAIV,EACJW,EAAI,IAAOD,EAAET,MAAQQ,EAAER,OACvBW,EAAI,IAAOF,EAAEP,OAASM,EAAEN,QACxBU,EAAKH,EAAEZ,OAAOC,EAAIU,EAAEX,OAAOC,EAC3Be,EAAKJ,EAAEZ,OAAOI,EAAIO,EAAEX,OAAOI,EAEjC,GAAIa,KAAKC,IAAIH,IAAOF,GAAKI,KAAKC,IAAIF,IAAOF,EACzC,CAEE,MAAMK,EAAKN,EAAIG,EACTI,EAAKN,EAAIC,EAEf,OAAII,EAAKC,EACHD,GAAMC,EAEDtB,EAAUuB,aAAaZ,OAGrBX,EAAUuB,aAAad,KAG9BY,GAAMC,EAEDtB,EAAUuB,aAAab,MAGvBV,EAAUuB,aAAaf,GAGpC,CACE,OAAO,CAEX,GAMF,OAAOJ,CACT,CAQA,OAPAJ,EAAUuB,aAAe,CACvBd,KAAM,OACNC,MAAO,QACPC,OAAQ,SACRH,IAAK,OAGA,C,UACLR,E,OAlGF,SAAiBC,GACf,IAAIG,EAAO,CACToB,OAAQvB,EAAKuB,OACbrB,EAAGF,EAAKE,EACRG,EAAGL,EAAKK,EACJmB,mBACF,OAAOzB,EAAU,CACfK,MAAqB,EAAdD,EAAKoB,OACZjB,OAAsB,EAAdH,EAAKoB,OACbrB,EAAGC,EAAKD,EAAIC,EAAKoB,OACjBlB,EAAGF,EAAKE,EAAIF,EAAKoB,QAErB,GAGF,OAAOpB,CACT,EAqFF,CAtHkB","sources":["experiments-static/brick-breaker/modules/Geometry.js"],"sourcesContent":["window.Geometry = (function () {\n  function pointInPolygon () {\n\n  }\n\n  function Point () {\n\n  }\n\n  function Line () {\n\n  }\n\n  function Ray () {\n\n  }\n\n  function Circle (spec) {\n    let that = {\n      radius: spec.radius,\n      x: spec.x,\n      y: spec.y,\n      get boundingRect () {\n        return Rectangle({\n          width: that.radius * 2,\n          height: that.radius * 2,\n          x: that.x - that.radius,\n          y: that.y - that.radius,\n        });\n      }\n    }\n\n    return that;\n  }\n\n  function Rectangle (spec) {\n    // x and y is from top left corner\n    var center = {\n      get x () {\n        return that.x + that.width / 2\n      },\n      get y () {\n        return that.y + that.height / 2;\n      },\n    };\n    var that = {\n      height: spec.height,\n      width: spec.width, \n      x: spec.x,\n      y: spec.y,\n      get top () {\n        return that.y;\n      },\n      get left () {\n        return that.x;\n      },\n      get right () {\n        return that.x + that.width;\n      },\n      get bottom () {\n        return that.y + that.height;\n      },\n      get center () {\n        return center\n      },\n      intersectsRect (B) {\n        // https://gamedev.stackexchange.com/a/29796\n        const A = that;\n        const w = 0.5 * (A.width + B.width);\n        const h = 0.5 * (A.height + B.height);\n        const dx = A.center.x - B.center.x;\n        const dy = A.center.y - B.center.y;\n\n        if (Math.abs(dx) <= w && Math.abs(dy) <= h)\n        {\n          /* collision! */\n          const wy = w * dy;\n          const hx = h * dx;\n\n          if (wy > hx) {\n            if (wy > -hx) {\n              /* at the bottom */\n              return Rectangle.intersectDir.bottom;\n            } else {\n                /* on the left */\n                return Rectangle.intersectDir.left;\n            }\n          }else {\n            if (wy > -hx) {\n              /* on the right */\n              return Rectangle.intersectDir.right;\n            } else {\n              /* collision at the top */\n              return Rectangle.intersectDir.top;\n            }\n          }\n        } else {\n          return false;\n        }\n      },\n      // get edges () {\n      //   return [that]\n      // },\n    };\n    \n    return that;\n  }\n  Rectangle.intersectDir = {\n    left: 'left',\n    right: 'right',\n    bottom: 'bottom',\n    top: 'top'\n  }\n\n  return {\n    Rectangle,\n    Circle,\n  };\n})();\n"],"names":["window","Geometry","Rectangle","spec","center","x","that","width","y","height","top","left","right","bottom","intersectsRect","B","A","w","h","dx","dy","Math","abs","wy","hx","intersectDir","radius","boundingRect"],"version":3,"file":"index.0cb56d9c.js.map"}