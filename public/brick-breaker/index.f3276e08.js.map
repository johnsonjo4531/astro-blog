{"mappings":"AAAAA,OAAOC,UAAY,SAAWC,EAAYC,GAExC,MAAMC,EAAQ,IAAIC,IACZC,EAAM,IAAID,IAChB,IAAIE,EAAc,KACdC,EAAc,GACdC,EAAY,GAEhB,SAASC,EAAUC,EAAUC,GAC3BR,EAAMS,IAAIF,EAAUT,EAAW,CAC7BY,MAAM,EACNC,OAAQP,E,IACRI,IAEJ,CAQA,SAASI,EAAQL,EAAUC,GACzBN,EAAIO,IAAIF,EAAUT,EAAW,C,IAC3BU,EACAG,OAAQN,IAEZ,CA+CA,MAAMQ,EAAad,GAXnB,SAA0BG,GACxB,IAAIY,EAAKZ,EAAIa,YACbD,EAAGE,YAAc,EACjBF,EAAGH,OAAST,EAAIS,OAChBG,EAAGG,MAKL,GAE6C,IAAK,IAWlD,IAAIC,GAAO,EACPC,EAAsBf,EACtBgB,EAAoBf,EACpBgB,EAAO,C,SACTf,E,YAzEF,YAAyBN,GACvB,IAAI,MAAOO,EAAUC,KAAQR,EAC3BM,EAASC,EAAUC,EAEvB,E,OAuEEI,E,UA9DF,YAAuBV,GACrB,IAAI,MAAOK,EAAUC,KAAQN,EAC3BU,EAAOL,EAAUC,EAErB,E,UAEA,SAAoBD,GAClB,IAAIe,EAAWtB,EAAMuB,IAAIhB,GACtBe,IAAanB,IAGbmB,GACEnB,GACDA,EAAYqB,QAEdrB,EAAcmB,EACdA,EAASL,OACTK,EAASN,YAAc,GAEvBS,QAAQC,KAAK,qBAAqBnB,OAEtC,E,QA0BA,SAAkBA,GAChB,IAAIoB,EAAQzB,EAAIqB,IAAIhB,GACjBoB,EACDd,EAAWc,GAEXF,QAAQC,KAAK,4BAA4BnB,MAE7C,EAYMH,kBACF,OAAOA,CACT,EACIA,gBAAawB,GACf,GAAGA,EAAM,GAAKA,EAAM,EAClB,MAAM,IAAIC,MAAM,sEAElBzB,EAAcwB,EACd,IAAI,MAAME,KAAM9B,EAAM+B,SACpBD,EAAGnB,OAASiB,CAEhB,EACIvB,gBACF,OAAOA,CACT,EACIA,cAAWuB,GACb,GAAGA,EAAM,GAAKA,EAAM,EAClB,MAAM,IAAIC,MAAM,sEAElBxB,EAAYuB,EACZ,IAAI,MAAME,KAAM5B,EAAI6B,SAClBD,EAAGnB,OAASiB,CAEhB,EACIV,WACF,OAAOA,CACT,EACIA,SAAMU,GAERV,EADAU,IAAQA,EAELA,GACDT,EAAsBf,EACtBgB,EAAoBf,EACpBgB,EAAKhB,UAAY,EACjBgB,EAAKjB,YAAc,IAEnBiB,EAAKjB,YAAce,EACnBE,EAAKhB,UAAYe,EAErB,GAGF,OAAOC,CACT,CA1ImB,CA0IhBW,WAAYC","sources":["experiments-static/brick-breaker/modules/AudioPool.js"],"sourcesContent":["window.AudioPool = (function (AudioAsset, throttle) {\n  \n  const music = new Map();\n  const sfx = new Map();\n  var activeMusic = null;\n  var musicVolume = 0.5;\n  var sfxVolume = 0.7;\n\n  function addMusic (nickname, src) {\n    music.set(nickname, AudioAsset({\n      loop: true,\n      volume: musicVolume,\n      src,\n    }));\n  }\n\n  function addAllMusic (...music) {\n    for(const [nickname, src] of music) {\n      addMusic(nickname, src);\n    }\n  }\n\n  function addSFX (nickname, src) {\n    sfx.set(nickname, AudioAsset({\n      src,\n      volume: sfxVolume,\n    }));\n  }\n\n  function addAllSFX (...sfx) {\n    for(const [nickname, src] of sfx) {\n      addSFX(nickname, src);\n    }\n  }\n\n  function playMusic (nickname) {\n    var newMusic = music.get(nickname);\n    if(newMusic === activeMusic) {\n      return;\n    }\n    if(newMusic) {\n      if(activeMusic) {\n        activeMusic.pause();\n      }\n      activeMusic = newMusic;\n      newMusic.play();\n      newMusic.currentTime = 0;\n    } else {\n      console.warn(`No music by name '${nickname}'.`);\n    }\n  }\n\n  function audioEnded (audio) {\n    new Promise(res => {\n      var interval = setInterval(() => {\n        if(audio.ended) {\n          clearInterval(interval);\n          res(audio);\n        }\n      }, 1000/60);\n    });\n  }\n\n  function copySFXPlayOnce (sfx) {\n    var fx = sfx.cloneNode();\n    fx.currentTime = 0;\n    fx.volume = sfx.volume;\n    fx.play();\n    // I guess it cleans up itself??? Otherwise I have\n    // no idea how to clean it up at the moment. I assume\n    // it's garbage collected when it has no references and\n    // has stopped playing.\n  }\n\n  const playOneSFX = throttle(copySFXPlayOnce, 1000/30);\n\n  function playSFX (nickname) {\n    var sound = sfx.get(nickname);\n    if(sound) {\n      playOneSFX(sound);\n    } else {\n      console.warn(`No sound effect by name '${nickname}'.`);\n    }\n  }\n\n  var mute = false;\n  var previousMusicVolume = musicVolume;\n  var previousSFXVolume = sfxVolume;\n  var that = {\n    addMusic,\n    addAllMusic,\n    addSFX,\n    addAllSFX,\n    playMusic,\n    playSFX,\n    get musicVolume () {\n      return musicVolume;\n    },\n    set musicVolume (val) {\n      if(val < 0 || val > 1) {\n        throw new Error('Invalid volume value. Valid volumes are between 0 and 1 inclusive.');\n      }\n      musicVolume = val\n      for(const el of music.values()) {\n        el.volume = val;\n      }\n    },\n    get sfxVolume () {\n      return sfxVolume;\n    },\n    set sfxVolume (val) {\n      if(val < 0 || val > 1) {\n        throw new Error('Invalid volume value. Valid volumes are between 0 and 1 inclusive.');\n      }\n      sfxVolume = val\n      for(const el of sfx.values()) {\n        el.volume = val;\n      }\n    },\n    get mute () {\n      return mute;\n    },\n    set mute (val) {\n      val = !!val;\n      mute = val;\n      if(val) {\n        previousMusicVolume = musicVolume;\n        previousSFXVolume = sfxVolume;\n        that.sfxVolume = 0;\n        that.musicVolume = 0;\n      } else {\n        that.musicVolume = previousMusicVolume;\n        that.sfxVolume = previousSFXVolume;\n      }\n    }\n  }\n\n  return that;\n})(AudioAsset, throttle);\n"],"names":["window","AudioPool","AudioAsset1","throttle1","music","Map","sfx","activeMusic","musicVolume","sfxVolume","addMusic","nickname","src","set","loop","volume","addSFX","playOneSFX","fx","cloneNode","currentTime","play","mute","previousMusicVolume","previousSFXVolume","that","newMusic","get","pause","console","warn","sound","val","Error","el","values","AudioAsset","throttle"],"version":3,"file":"index.f3276e08.js.map"}