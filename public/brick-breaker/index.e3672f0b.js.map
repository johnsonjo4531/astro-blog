{"mappings":"AAAAA,OAAOC,SAAW,SAAoBC,EAAWC,EAAcC,GAE7D,IAAIC,GAAU,EACVC,EAAW,KACf,IAAIC,EAAW,CAAEC,SAAW,GAC5B,IAAIC,EAAQ,KACZ,IAAIC,EAAgB,KAChBC,EAAc,KA8ClB,SAASC,EAAQC,GAEfJ,EAAMG,OAAOC,GACbN,EAASO,YAAYL,GA1BvB,SAAuBA,GACrB,IAAI,MAAMM,KAASN,EAAMO,cACvBC,eAAeC,OAAO,CACpBC,SAAU,CAAEC,EAAGL,EAAMM,OAAOD,EAAGE,EAAGP,EAAMM,OAAOC,EAAGC,KAAMR,EAAMS,KAAMC,KAAMV,EAAMW,MAAOC,KAAMZ,EAAMa,IAAKC,KAAMd,EAAMe,QACpHC,MAAO,CAAEC,KAAM,IAAMC,MAAO,OAC5BC,SAAU,CAAEF,KAAM,IAAKC,MAAO,KAC9BE,KAAM,CAAEH,KAAM,GAAIC,MAAO,IACzBG,mBAAoB,EACpBC,MAAOtB,EAAMsB,MACbC,QAAS,GACTC,aAAa,EACbC,QAAS,EACTC,QAAS1B,EAAM2B,OAAS3B,EAAM4B,MAC9BC,eAAgB,KACfrC,GAELE,EAAMO,cAAgB,IAAI6B,GAC5B,CAUEC,CAAarC,GACbQ,eAAeL,OAAOC,EACxB,CAOA,MAAMkC,EAAgB,GACtB,SAASC,EAAUC,GACb3C,IACFA,EAAW2C,GAEb,IAAIpC,EAAUoC,EAAU3C,EACxBA,EAAW2C,EACX,IAAIC,EAAMrC,EAEV,KA1BF,SAAsBA,GACpBF,EAAYwC,OAAOtC,EAASJ,EAC9B,CAuBE2C,CAAYvC,GACNqC,EAAMH,GACVnC,EAAOmC,GACPG,GAAOH,EAENG,EAAM,GAGPtC,EAAOsC,GArBX,SAAiBrC,GACfN,EAASC,OAAOC,EAAOI,EACzB,CAqBEL,CAAOK,IAEHJ,EAAM4C,UAAYhD,EACpBiD,sBAAsBN,IAEtBrC,EAAY4C,aACZ9C,EAAQ,KAEZ,CAoBA,MAAO,C,MAlBP,WACEJ,GAAU,EACVI,EAAQP,EAAUQ,GAClB4C,sBAAsBN,GACtBrC,EAAY6C,UACd,E,IAEA,WACEnD,GAAU,CACZ,E,KAEA,SAAeoD,EAAaC,GAC1BnD,EAAWkD,EACX/C,EAAgBgD,EAChB/C,EAAcP,IACdO,EAAYgD,cACd,EAMMlD,YACF,OAAOA,CACT,EAEJ,CAxHkB,CAwHfmD,UAAWC,aAAcC","sources":["experiments-static/brick-breaker/modules/GameLoop.js"],"sourcesContent":["window.GameLoop = (function gameLoop (GameState, GameRenderer, GameActions) {\n\n  var running = false;\n  var lastTime = null;\n  let renderer = { render () {} };\n  var state = null;\n  let gameStateSpec = null;\n  let gameActions = null;\n\n  var Interval = (cb, ms) =>  {\n    let interval = null; \n    return {\n      activate () {\n        var then = Date.now();\n        interval = setInterval(() => {\n          var now = Date.now();\n          var elapsed = now - then;\n          cb(elapsed);\n          then = now;\n        },ms)\n      },\n      deactivate () {\n        if(interval) {\n          clearInterval(interval);\n          interval = null;\n        }\n      }\n    };\n  }\n\n  function addParticles (state) {\n    for(const brick of state.removedBricks) {\n      ParticleSystem.create({\n        position: { x: brick.center.x, y: brick.center.y, xMin: brick.left, xMax: brick.right, yMin: brick.top, yMax: brick.bottom },\n        speed: { mean: 0.05, stdev: 0.0225},\n        lifetime: { mean: 300, stdev: 150 },\n        size: { mean: 15, stdev: 10 },\n        particlesPerUpdate: 3,\n        color: brick.color,\n        opacity: 0.5,\n        rectangular: true,\n        xMaxDir: 1,\n        yMaxDir: brick.height / brick.width,\n        systemLifetime: 2000,\n      }, renderer);\n    }\n    state.removedBricks = new Set();\n  }\n  \n  function handleInput (elapsed) {\n    gameActions.handle(elapsed, state)\n  }\n\n  function update (elapsed) {\n    //state.update(elapsed);\n    state.update(elapsed);\n    renderer.renderSound(state);\n    addParticles(state);\n    ParticleSystem.update(elapsed);\n  }\n\n  function render (elapsed) {\n    renderer.render(state, elapsed);\n  }\n\n  var lag = 0;\n  const UPDATE_PER_MS = 16;\n  function gameLoop (timeNow) {\n    if(!lastTime) {\n      lastTime = timeNow;\n    }\n    var elapsed = timeNow - lastTime;\n    lastTime = timeNow;\n    var lag = elapsed;\n    handleInput(elapsed);\n    while(lag > UPDATE_PER_MS) {\n      update(UPDATE_PER_MS);\n      lag -= UPDATE_PER_MS;\n    }\n    if(lag > 0) {\n      // extra update but atleast we won't be telling render\n      // the wrong information\n      update(lag);\n    }\n    render(elapsed);\n\n    if(!state.gameOver && running) {\n      requestAnimationFrame(gameLoop);\n    } else {\n      gameActions.deactivate();\n      state = null;\n    }\n  }\n  \n  function start () {\n    running = true;\n    state = GameState(gameStateSpec);\n    requestAnimationFrame(gameLoop);\n    gameActions.activate();\n  }\n\n  function end () {\n    running = false;\n  }\n\n  function init (newRenderer, spec) {\n    renderer = newRenderer;\n    gameStateSpec = spec;\n    gameActions = GameActions();\n    gameActions.setupActions();\n  }\n\n  return {\n    start,\n    end,\n    init,\n    get state () {\n      return state;\n    },\n  }\n})(GameState, GameRenderer, GameActions);\n"],"names":["window","GameLoop","GameState1","GameRenderer1","GameActions1","running","lastTime","renderer","render","state","gameStateSpec","gameActions","update","elapsed","renderSound","brick","removedBricks","ParticleSystem","create","position","x","center","y","xMin","left","xMax","right","yMin","top","yMax","bottom","speed","mean","stdev","lifetime","size","particlesPerUpdate","color","opacity","rectangular","xMaxDir","yMaxDir","height","width","systemLifetime","Set","addParticles","UPDATE_PER_MS","gameLoop","timeNow","lag","handle","handleInput","gameOver","requestAnimationFrame","deactivate","activate","newRenderer","spec","setupActions","GameState","GameRenderer","GameActions"],"version":3,"file":"index.e3672f0b.js.map"}