---
import SpinningCube from "./SpinningCube.astro";
export interface Props {
  avatarSize?: string;
  animateOnce: true;
}

const { avatarSize = "large", animateOnce = false } = Astro.props;
---

<a href="/"
  ><div>
    <div
      class={`avatar-container avatar-spinning-cube animate ${
        animateOnce ? "animate-once-inview" : "animate-inview"
      } ${avatarSize}`}
    >
      <SpinningCube>
        <img
          alt="Jigs' avatar"
          class={`hexagon-clip hidden-opacity avatar img-${avatarSize}`}
          src="/me-business-pic_compressed-cropped.png"
        />
      </SpinningCube>
    </div>
  </div></a
>
<script>
  import { observe } from "./Inview";

  const once = document.querySelectorAll(".animate-once-inview");
  const animate = document.querySelectorAll(".animate-inview");
  once.forEach((el) =>
    observe(
      el,
      ([e]) =>
        e && e.intersectionRatio > 0.5 && el.classList.toggle("animate", true),
      {
        threshold: [0, 0.51, 1],
      }
    )
  );
  animate.forEach((el) =>
    observe(
      el,
      ([e]) =>
        e && e.intersectionRatio > 0.5
          ? el.classList.toggle("animate", true)
          : el.classList.toggle("animate", false),
      {
        threshold: [0, 0.51, 1],
      }
    )
  );
</script>
<style>
  @keyframes hex-appear {
    0% {
      background-color: transparent;
      backdrop-filter: none;
    }
    50% {
      background-color: transparent;
      backdrop-filter: none;
    }
    100% {
      background-color: rgba(var(--current-bg), 0.5);
    }
  }
  @keyframes appear {
    0% {
      opacity: 0;
    }
    50% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
  .avatar-container .img-large,
  .avatar-container .img-medium {
    --opacity: 1;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 5;
    opacity: var(--opacity, 0);
    backdrop-filter: blur(10px);
    background-color: rgba(var(--current-bg), 0.5);
  }

  .animate.avatar-container.animate .img-large,
  .animate.avatar-container.animate .img-medium {
    animation: appear var(--animation-duration) 1 linear;
  }
  .avatar-container.large:not(.avatar-spinning-cube) {
    --dim: 500;
    --hex-padding: calc(var(--dim) / 100 * 1em);
  }
  .avatar-container.medium:not(.avatar-spinning-cube) {
    --dim: 250;
  }

  .avatar-container {
    --hex-padding: calc(var(--dim) / 100 * 1em);
  }
  .sticky-header .avatar-container .stage .img-large,
  .stage .img-medium {
    --opacity: 0;
    z-index: 4;
  }
  .avatar-spinning-cube img {
  }
  .fit-content {
    width: fit-content;
  }

  @keyframes appear {
    from {
      --opacity: 0;
    }
    to {
      --opacity: 1;
    }
  }
  .avatar-container {
    --animation-duration: 1s;
    --animation-delay: 0s;
    --background-color: var(--current-bg);
    margin: 0 auto;
    width: fit-content;
    padding: var(--hex-padding);
    backdrop-filter: blur(10px);
    background-color: rgba(var(--current-bg), 0.5);
    --hexagon-slant: 25%;
    clip-path: polygon(
      50% 0%,
      100% var(--hexagon-slant),
      100% calc(100% - var(--hexagon-slant)),
      50% 100%,
      0 calc(100% - var(--hexagon-slant)),
      0 var(--hexagon-slant)
    );
  }

  .avatar-container.animate {
    animation: hex-appear var(--animation-duration) 1 linear
      var(--animation-delay);
  }
</style>
